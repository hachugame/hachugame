{"version":3,"sources":["images/hachu.png","actions/index.js","reducers/index.js","gameConstants.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","START_GAME","RUNNING_GAME","GAME_OVER","MOVE_RIGHT","MOVE_LEFT","pixelsToMove","hachuApp","combineReducers","gameStatus","state","arguments","length","undefined","type","actions","currentCharacter","offsetX","Object","assign","store","createStore","HachuApp","applyMiddleware","ReduxThunk","App","react_default","a","createElement","es","className","src","hachu","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oPCC3BC,EAAa,aACbC,EAAe,eAEfC,EAAY,YACZC,EAAa,aACbC,EAAY,YCDjBC,ECDQ,GD8BhB,IAKeC,EALEC,YAAgB,CAChCC,WA5BD,WAA4C,IAAxBC,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB,OAC3B,QAD2CA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC5BC,MACb,KAAKC,EACJ,KAAKA,EACH,MAAO,UACV,KAAKA,EACJ,MAAO,YACR,QACC,OAAOL,IAqBTM,iBAjBF,WAA8C,IAApBN,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GACjC,QAD6CA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC9BC,MACf,KAAKC,EACJ,MAAO,CACNE,QAAS,GAEX,KAAKF,EACJ,OAAOG,OAAOC,OAAO,GAAIT,EAAO,CAAEO,QAASP,EAAMO,QAAUX,IAC5D,KAAKS,EACJ,OAAOG,OAAOC,OAAO,GAAIT,EAAO,CAAEO,QAASP,EAAMO,QAAUX,IAC5D,QACC,OAAOI,MEtBHU,EAAQC,YACbC,EACAC,YAAgBC,MAgBFC,MAZf,WACE,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUT,MAAOA,GACfM,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAOF,UAAU,WAAWG,IAAI,cCPhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b779af18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hachu.2c330888.png\";","\r\nexport const START_GAME = 'START_GAME';\r\nexport const RUNNING_GAME = 'RUNNING_GAME';\r\nexport const STOP_GAME = 'STOP_GAME';\r\nexport const GAME_OVER = 'GAME_OVER';\r\nexport const MOVE_RIGHT = 'MOVE_RIGHT';\r\nexport const MOVE_LEFT = 'MOVE_LEFT';\r\nexport const ADD_SCORE = 'ADD_SCORE';\r\nexport const ADD_FALLER = 'ADD_FALLER';\r\nexport const MOVE_FALLER = 'MOVE_FALLER';\r\n\r\nexport const gameOver = () => ({\r\n\ttype: GAME_OVER,\r\n});\r\nexport const moveRight = () => ({\r\n\ttype: MOVE_RIGHT,\r\n});\r\nexport const moveLeft = () => ({\r\n\ttype: MOVE_LEFT,\r\n});\r\nexport const moveCharacter = (direction) => (\r\n  function (dispatch, getState) {\r\n    const { gameStatus } = getState();\r\n\r\n    const collisionCheck = false;\r\n\r\n    if (gameStatus === 'GAME_OVER') {\r\n      return;\r\n    }\r\n\r\n    switch (direction) {\r\n      case 'left':\r\n        if (collisionCheck === false) {\r\n          dispatch(moveLeft());\r\n        }\r\n        return;\r\n      case 'right':\r\n        if (collisionCheck === false) {\r\n          dispatch(moveRight());\r\n        }\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n);\r\n","import { combineReducers } from 'redux';\r\n\r\nimport gameConstants from '../gameConstants.js';\r\nimport * as actions from '../actions/index.js';\r\n\r\nconst { pixelsToMove } = gameConstants;\r\n\r\nfunction gameStatus(state = 'IDLE', action) {\r\n\tswitch (action.type) {\r\n  \tcase actions.START_GAME:\r\n    case actions.RUNNING_GAME:\r\n      return 'PLAYING';\r\n  \tcase actions.GAME_OVER:\r\n  \t\treturn 'GAME_OVER';\r\n  \tdefault:\r\n  \t\treturn state;\r\n\t}\r\n}\r\n\r\nfunction currentCharacter(state = {}, action) {\r\n\tswitch (action.type) {\r\n\tcase actions.START_GAME:\r\n\t\treturn {\r\n\t\t\toffsetX: 0,\r\n\t\t};\r\n\tcase actions.MOVE_RIGHT:\r\n\t\treturn Object.assign({}, state, { offsetX: state.offsetX + pixelsToMove });\r\n\tcase actions.MOVE_LEFT:\r\n\t\treturn Object.assign({}, state, { offsetX: state.offsetX - pixelsToMove });\r\n\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst hachuApp = combineReducers({\r\n\tgameStatus,\r\n  currentCharacter,\r\n});\r\n\r\nexport default hachuApp;\r\n","\r\nexport default {\r\n  gameWidth: 1100,\r\n  gameHeight: 700,\r\n  pixelsToMove: 10,\r\n  thingsThatFall: [\r\n    'cucumber','crab','mogi','nabang',\r\n  ],\r\n  fallerProperties: {\r\n    cucumber: {\r\n      isGood: true,\r\n      width: 50,\r\n      height: 40,\r\n    },\r\n    crab: {\r\n      isGood: true,\r\n      width: 50,\r\n      height: 40,\r\n    },\r\n    mogi: {\r\n      isGood: false,\r\n      width: 50,\r\n      height: 40,\r\n    },\r\n    nabang: {\r\n      isGood: false,\r\n      width: 50,\r\n      height: 40,\r\n    }\r\n  },\r\n};\r\n","import { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport hachu from './images/hachu.png';\nimport './App.css';\nimport ReduxThunk from 'redux-thunk';\nimport HachuApp from './reducers/index.js';\n\nconst store = createStore(\n\tHachuApp,\n\tapplyMiddleware(ReduxThunk)\n);\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={hachu} className=\"App-logo\" alt=\"hachu\" />\n        </header>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}